generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Result {
  win
  lose
  attempt
}

enum MatchStage {
  preliminary
  main
}

enum MarkingQuality {
  good
  bad
  lucky
}

enum TechniqueType {
  attack
  defense
  etc
}

model User {
  id           Int    @id @default(autoincrement())
  email        String @unique
  name         String
  passwordHash String @map("password_hash")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  matches           Match[]
  notes             Note[]
  markings          Marking[]
  opponents         Opponent[]
  techniques        Technique[]
  techniqueAttempts TechniqueAttempt[]
}

model Match {
  id             Int      @id @default(autoincrement())
  objectName     String   @default("") @map("object_name")
  tournamentName String   @map("tournament_name")
  tournamentDate DateTime @map("tournament_date")

  opponent   Opponent @relation(fields: [opponentId], references: [id])
  opponentId Int      @map("opponent_id")

  myScore       Int @map("my_score")
  opponentScore Int @map("opponent_score")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  stage MatchStage @default(preliminary)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  markings          Marking[]
  techniqueAttempts TechniqueAttempt[]
}

model Marking {
  id        Int    @id @default(autoincrement())
  match     Match  @relation(fields: [matchId], references: [id])
  matchId   Int    @map("match_id")
  timestamp Float
  result    Result

  myTechniqueId       Int?       @map("my_technique_id")
  opponentTechniqueId Int?       @map("opponent_technique_id")
  myTechnique         Technique? @relation("my_technique", fields: [myTechniqueId], references: [id])
  opponentTechnique   Technique? @relation("opponent_technique", fields: [opponentTechniqueId], references: [id])

  quality    MarkingQuality
  remainTime Int            @map("remain_time")

  note String

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

model Note {
  id Int @id @default(autoincrement())

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  text       String    @db.Citext
  lastUsedAt DateTime  @default(now()) @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@unique([userId, text])
}

model Opponent {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  name String
  team String

  lastUsedAt DateTime  @default(now()) @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  matches Match[]
}

model Technique {
  id       Int    @id @default(autoincrement())
  name     String
  parentId Int?   @map("parent_id")

  parent   Technique?  @relation("technique_parent", fields: [parentId], references: [id])
  children Technique[] @relation("technique_parent")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  type TechniqueType

  lastUsedAt DateTime  @default(now()) @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  markingMyTechnique       Marking[]          @relation("my_technique")
  markingOpponentTechnique Marking[]          @relation("opponent_technique")
  techniqueAttempts        TechniqueAttempt[]
}

model TechniqueAttempt {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  technique   Technique @relation(fields: [techniqueId], references: [id])
  techniqueId Int       @map("technique_id")

  match   Match? @relation(fields: [matchId], references: [id])
  matchId Int?   @map("match_id")

  attemptCount Int @default(0) @map("attempt_count")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}
