generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  passwordHash      String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  markings          Marking[]
  matches           Match[]
  notes             Note[]
  opponents         Opponent[]
  techniques        Technique[]
  techniqueAttempts TechniqueAttempt[]
}

model Match {
  id                Int                @id @default(autoincrement())
  tournamentName    String
  userId            Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  myScore           Int
  opponentScore     Int
  tournamentDate    DateTime
  objectName        String             @default("")
  opponentId        Int
  stage             MatchStage         @default(preliminary)
  markings          Marking[]
  opponent          Opponent           @relation(fields: [opponentId], references: [id], map: "Match_opponent_id_fkey")
  user              User               @relation(fields: [userId], references: [id], map: "Match_user_id_fkey")
  techniqueAttempts TechniqueAttempt[]
}

model Marking {
  id                  Int            @id @default(autoincrement())
  matchId             Int
  timestamp           Float
  result              Result
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  quality             MarkingQuality
  remainTime          Int
  note                String
  userId              Int
  myTechniqueId       Int?
  opponentTechniqueId Int?
  match               Match          @relation(fields: [matchId], references: [id], map: "Marking_match_id_fkey")
  myTechnique         Technique?     @relation("my_technique", fields: [myTechniqueId], references: [id], map: "Marking_my_technique_id_fkey")
  opponentTechnique   Technique?     @relation("opponent_technique", fields: [opponentTechniqueId], references: [id], map: "Marking_opponent_technique_id_fkey")
  user                User           @relation(fields: [userId], references: [id], map: "Marking_user_id_fkey")
}

model Note {
  id         Int       @id @default(autoincrement())
  userId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastUsedAt DateTime  @default(now())
  text       String    @db.Citext
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id], map: "Note_user_id_fkey")

  @@unique([userId, text], map: "Note_user_id_text_key")
}

model Opponent {
  id         Int       @id @default(autoincrement())
  userId     Int
  name       String
  team       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  lastUsedAt DateTime  @default(now())
  matches    Match[]
  user       User      @relation(fields: [userId], references: [id], map: "Opponent_user_id_fkey")
}

model Technique {
  id                       Int                @id @default(autoincrement())
  name                     String
  parentId                 Int?
  userId                   Int
  createdAt                DateTime           @default(now())
  deletedAt                DateTime?
  updatedAt                DateTime           @default(now()) @updatedAt
  type                     TechniqueType
  lastUsedAt               DateTime           @default(now())
  markingMyTechnique       Marking[]          @relation("my_technique")
  markingOpponentTechnique Marking[]          @relation("opponent_technique")
  parent                   Technique?         @relation("technique_parent", fields: [parentId], references: [id], map: "Technique_parent_id_fkey")
  children                 Technique[]        @relation("technique_parent")
  user                     User               @relation(fields: [userId], references: [id], map: "Technique_user_id_fkey")
  techniqueAttempts        TechniqueAttempt[]
}

model TechniqueAttempt {
  id           Int       @id @default(autoincrement())
  userId       Int
  techniqueId  Int
  matchId      Int?
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  attemptCount Int       @default(0)
  match        Match?    @relation(fields: [matchId], references: [id], map: "TechniqueAttempt_match_id_fkey")
  technique    Technique @relation(fields: [techniqueId], references: [id], map: "TechniqueAttempt_technique_id_fkey")
  user         User      @relation(fields: [userId], references: [id], map: "TechniqueAttempt_user_id_fkey")
}

enum Result {
  win
  lose
  attempt
}

enum MatchStage {
  preliminary
  main
}

enum MarkingQuality {
  good
  bad
  lucky
}

enum TechniqueType {
  attack
  defense
  etc
}
