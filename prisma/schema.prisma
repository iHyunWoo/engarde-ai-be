generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Result {
  win
  lose
  attempt
}

enum MarkingType {
  none
  lunge
  advanced_lunge
  fleche
  push
  parry
  counter_attack
}

enum MarkingQuality {
  good
  bad
  lucky
}

model User {
  id            Int    @id @default(autoincrement())
  email         String @unique
  name          String
  password_hash String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Match     Match[]
  Note      Note[]
  Marking   Marking[]
  Opponent  Opponent[]
  Technique Technique[]
}

model Match {
  id              Int      @id @default(autoincrement())
  object_name     String   @default("")
  tournament_name String
  tournament_date DateTime

  Opponent    Opponent? @relation(fields: [opponent_id], references: [id])
  opponent_id Int?

  my_score                     Int
  opponent_score               Int
  attack_attempt_count         Int
  parry_attempt_count          Int
  counter_attack_attempt_count Int

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Marking Marking[]
}

model Marking {
  id        Int    @id @default(autoincrement())
  match     Match  @relation(fields: [match_id], references: [id])
  match_id  Int
  timestamp Float
  result    Result

  my_techinque_id       Int
  opponent_techinque_id Int
  my_technique          Technique @relation("my_technique", fields: [my_techinque_id], references: [id])
  opponent_technique    Technique @relation("opponent_technique", fields: [opponent_techinque_id], references: [id])

  quality     MarkingQuality
  remain_time Int

  note String

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Note {
  id Int @id @default(autoincrement())

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  text         String    @db.Citext // 대소문자 구분 X
  last_used_at DateTime  @default(now())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  @@unique([user_id, text]) // 같은 유저의 동일 텍스트 중복 방지
}

model Opponent {
  id      Int  @id @default(autoincrement())
  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  name String
  team String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  matches Match[]
}

model Technique {
  id        Int    @id @default(autoincrement())
  name      String
  parent_id Int?

  parent   Technique?  @relation("technique_parent", fields: [parent_id], references: [id])
  children Technique[] @relation("technique_parent")

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  marking_my_techinque       Marking[] @relation("my_technique")
  marking_opponent_techinque Marking[] @relation("opponent_technique")
}
