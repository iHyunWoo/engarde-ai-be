generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Result {
  win
  lose
  attempt
}

enum MarkingType {
  none
  lunge
  advanced_lunge
  fleche
  push
  parry
  counter_attack
}

enum MarkingQuality {
  good
  bad
  lucky
}

model User {
  id            Int    @id @default(autoincrement())
  email         String @unique
  name          String
  password_hash String

  notes   Note[]
  matches Match[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Note {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id Int
  content String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Match {
  id                           Int      @id @default(autoincrement())
  video_url                    String
  thumbnail_url                String?
  tournament_name              String
  tournament_date              DateTime
  opponent_name                String
  opponent_team                String
  my_score                     Int
  opponent_score               Int
  attack_attempt_count         Int
  parry_attempt_count          Int
  counter_attack_attempt_count Int
  user                         User     @relation(fields: [user_id], references: [id])
  user_id                      Int

  markings Marking[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Marking {
  id            Int            @id @default(autoincrement())
  match         Match          @relation(fields: [match_id], references: [id])
  match_id      Int
  timestamp     Float
  result        Result
  my_type       MarkingType
  opponent_type MarkingType
  quality       MarkingQuality
  note          String
  remain_time   Int

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}
